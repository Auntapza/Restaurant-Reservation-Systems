// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  acc_id      Int       @id @default(autoincrement())
  acc_fname   String
  acc_lname   String
  role        Role
  date_create DateTime @default(now())

  Cart    Cart[]
  Rating  Rating[]
  Order   Order[]
  Username Username?
}

model Username {
  acc_id   Int     @id
  username String
  password String

  Account  Account @relation(fields: [acc_id], references: [acc_id])
}

model Cart {
  cart_id Int       @id @default(autoincrement())
  acc_id  Int       @unique

  Account    Account @relation(fields: [acc_id], references: [acc_id])
  CartDetail CartDetail[]
}

model CartDetail {
  cart_id Int
  food_id Int
  quantity Int

  Cart Cart @relation(fields: [cart_id], references: [cart_id])
  Food Food @relation(fields: [food_id], references: [food_id])

  @@id([cart_id, food_id])
}

model Food {
  food_id    Int       @id @default(autoincrement())
  food_name  String
  food_price Float
  food_img   String?
  text       String?
  date_create DateTime @default(now())
  cat_id     Int

  Category  Category @relation(fields: [cat_id], references: [cat_id])
  CartDetail CartDetail[]
  Rating     Rating[]
  OrderDetail OrderDetail[]
}

model Category {
  cat_id   Int    @id @default(autoincrement())
  cat_name String
  cat_img  String?

  Food Food[]
}

model Rating {
  rate_id Int    @id @default(autoincrement())
  acc_id  Int
  food_id Int
  score   Int
  detail  String?

  Account Account @relation(fields: [acc_id], references: [acc_id])
  Food    Food    @relation(fields: [food_id], references: [food_id])
}

model Order {
  order_id     Int       @id @default(autoincrement())
  order_date   DateTime @default(now())
  table_id     String
  time         DateTime
  recipt_file  String?
  order_status OrderStatus
  acc_id       Int

  Account     Account     @relation(fields: [acc_id], references: [acc_id])
  Table       Table       @relation(fields: [table_id], references: [table_id])
  OrderDetail OrderDetail[]
  Payment     Payment?
}

model OrderDetail {
  order_id Int
  food_id  Int
  quantity Int

  Order Order @relation(fields: [order_id], references: [order_id])
  Food  Food  @relation(fields: [food_id], references: [food_id])

  @@id([order_id, food_id])
}

model Table {
  table_id     String    @id
  table_status TableStatus

  Order Order[]
}

model Payment {
  order_id  Int    @id
  slip_image String?
  pay_time   DateTime
  status     PaymentStatus
  method     PaymentMethod

  Order Order @relation(fields: [order_id], references: [order_id])
}

enum Role {
  admin
  customer
  cashier
  waiter
  chef
}

enum OrderStatus {
  ordering
  pending
  complete
}

enum TableStatus {
  idel
  busy
  ordered
}

enum PaymentStatus {
  pending
  paid
  fail
}

enum PaymentMethod {
  cash
  promptpay
}
