generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  acc_id      Int          @id @default(autoincrement())
  acc_fname   String
  acc_lname   String
  role        account_role
  date_create DateTime     @default(now())
  cart        cart?
  order       order[]
  rating      rating[]
  Username    username?
}

model cart {
  cart_id    Int          @id @default(autoincrement())
  acc_id     Int          @unique(map: "Cart_acc_id_key")
  account    account      @relation(fields: [acc_id], references: [acc_id], map: "Cart_acc_id_fkey")
  CartDetail cartDetail[]
}

model category {
  cat_id   Int     @id @default(autoincrement())
  cat_name String
  cat_img  String?
  Food     food[]
}

model food {
  food_id     Int           @id @default(autoincrement())
  food_name   String
  food_price  Float
  food_img    String?
  text        String?
  date_create DateTime      @default(now())
  cat_id      Int
  CartDetail  cartDetail[]
  category    category      @relation(fields: [cat_id], references: [cat_id], map: "Food_cat_id_fkey")
  OrderDetail orderdetail[]
  Rating      rating[]

  @@index([cat_id], map: "Food_cat_id_fkey")
}

model order {
  order_id     Int                  @id @default(autoincrement())
  order_date   DateTime             @default(now())
  service_time   DateTime             @default(now())
  table_id     String
  order_status order_order_status
  modifyTime    DateTime       @default(now())
  acc_id       Int?
  recipt_img   String?
  account      account?             @relation(fields: [acc_id], references: [acc_id], onDelete: Restrict, map: "Order_acc_id_fkey")
  table        table                @relation(fields: [table_id], references: [table_id], map: "Order_table_id_fkey")
  OrderDetail  orderdetail[]
  payment  reservation_payment?

  @@index([acc_id], map: "Order_acc_id_fkey")
  @@index([table_id], map: "Order_table_id_fkey")
}

model orderdetail {
  order_id Int
  food_id  Int
  quantity Int
  complete ChefComplete  @default(none)
  Food     food  @relation(fields: [food_id], references: [food_id], map: "OrderDetail_food_id_fkey")
  Order    order @relation(fields: [order_id], references: [order_id], map: "OrderDetail_order_id_fkey")

  @@id([order_id, food_id])
  @@index([food_id], map: "OrderDetail_food_id_fkey")
}

model reservation_payment {
  order_id   Int            @id
  slip_image String
  pay_time   DateTime
  status     payment_status
  method     payment_method
  pay_count  Int
  order      order          @relation(fields: [order_id], references: [order_id], map: "Payment_order_id_fkey")
}

model rating {
  rate_id Int     @id @default(autoincrement())
  acc_id  Int
  food_id Int
  score   Int
  detail  String?
  account account @relation(fields: [acc_id], references: [acc_id], map: "Rating_acc_id_fkey")
  Food    food    @relation(fields: [food_id], references: [food_id], map: "Rating_food_id_fkey")

  @@index([acc_id], map: "Rating_acc_id_fkey")
  @@index([food_id], map: "Rating_food_id_fkey")
}

model table {
  table_id     String             @id
  order        order[]
}

model username {
  acc_id   Int     @id
  username String
  password String
  Account  account @relation(fields: [acc_id], references: [acc_id], map: "Username_acc_id_fkey")
}

model cartDetail {
  cart_id  Int
  food_id  Int
  quantity Int
  cart     cart @relation(fields: [cart_id], references: [cart_id], map: "CartDetail_cart_id_fkey")
  Food     food @relation(fields: [food_id], references: [food_id], map: "CartDetail_food_id_fkey")

  @@id([cart_id, food_id])
  @@index([food_id], map: "CartDetail_food_id_fkey")
}

enum ChefComplete {
  complete
  waitServe
  none
}

enum payment_status {
  pending
  paid
  fail
}

enum account_role {
  admin
  customer
  cashier
  waiter
  chef
}

enum payment_method {
  cash
  promptpay
}

enum order_order_status {
  ordering
  pending
  complete
  cancel
}
